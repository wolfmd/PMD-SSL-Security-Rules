<?xml version="1.0" encoding="UTF-8"?>
<ruleset xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="SSL_Security_Rules"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
   <description>SSL Security Rules for PMD. These rules are meant to guide Android developers in the correct direction when developing HTTPS calls.</description>

	<rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         language="java"
         message="AllowAllHostnameVerifier used, this is not a secure connection"
         name="AllowAllHostnames"
         typeResolution="true">
      		<description>
			public TrustAllSSLSocketFactory() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException, UnrecoverableKeyException {
  			super(null);
  			try {
    			SSLContext sslcontext=SSLContext.getInstance("TLS");
    			sslcontext.init(null,new TrustManager[]{new TrustAllManager()},null);
    			factory=sslcontext.getSocketFactory();
    			setHostnameVerifier(new AllowAllHostnameVerifier());  //super unsafe!
  			}
 			catch (  Exception ex) {}
			}
		</description>
      		<priority>5</priority>
      		<properties>
         		<property name="xpath">
            			<value>//ClassOrInterfaceType[@Image='AllowAllHostnameVerifier']</value>
         		</property>
      		</properties>
   	</rule>
   
	<rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         language="java"
         message="Custom HostnameVerifier used; this is not safe for production use"
         name="CustomHostnameVerifier"
         typeResolution="true">
      		<description>
			tls = (StartTlsResponse) ctx.extendedOperation( new StartTlsRequest() );
            		tls.setHostnameVerifier( hostnameVerifier ); //may lead to a potentially unsafe Verifier
            		tls.negotiate( sslContext.getSocketFactory() )
		</description>
      		<priority>4</priority>
      		<properties>
         		<property name="xpath">
            			<value>//PrimaryPrefix/Name[ends-with(@Image,'setHostnameVerifier')]</value>
         		</property>
      		</properties>
   	</rule>
   
	<rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         language="java"
         message="Custom SSLSocketFactory used"
         name="CustomSSLSocketFactory"
         typeResolution="true">
      		<description>
			SSLSocketFactory sf = new SSLSocketFactory(sslContext); //don't do this
		</description>
      		<priority>4</priority>
      		<properties>
         		<property name="xpath">
            			<value>
					//LocalVariableDeclaration[(Type/ReferenceType/ClassOrInterfaceType[@Image='SSLSocketFactory' ] and 
					VariableDeclarator/VariableInitializer/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression)]
				</value>
         		</property>
      		</properties>
   	</rule>

	<rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         language="java"
         message="Custom trust manager used. Remove from production"
         name="CustomTrustManager"
         typeResolution="true">
      		<description>
			TrustManager tm = new X509TrustManager() //Don't do this!
		</description>
     		<priority>4</priority>
      		<properties>
         		<property name="xpath">
            			<value>
					//LocalVariableDeclaration[(Type/ReferenceType/ClassOrInterfaceType[@Image='TrustManager' ] and 
					VariableDeclarator/VariableInitializer/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression)]
				</value>
         		</property>
      		</properties>
   	</rule>
   
	<rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         language="java"
         message="Try to shift services to use HTTPS"
         name="MoveToHTTP"
         typeResolution="true">
      		<description>
			connect('http://www.google.com');
		</description>
      		<priority>2</priority>
      		<properties>
         		<property name="xpath">
            			<value>
					//Literal[contains(@Image,'http://')]
				</value>
         		</property>
      		</properties>
   	</rule>

   <rule class="net.sourceforge.pmd.lang.java.rule.sunsecure.UseHTTPSWhenPossibleRule" deprecated="false" dfa="false"
         language="java"
         message="Use HTTPS when possible"
         name="HTTPSCouldBeUsed"         
         typeResolution="true">
            <description>
         connect('http://www.google.com');
      </description>
            <priority>4</priority>
      </rule>   

   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         language="java"
         message="Unsafe method SSL_set_verify_result used"
         name="SSLSetVerifyResult"
         typeResolution="true">
         <description>
         SSL_set_verify_result(SSL, long verify_result) //don't do this
         </description>
         <priority>3</priority>
         <properties>
         <property name="xpath">
         <value>//PrimaryPrefix/Name[contains(@Image,'SSL_set_verify_result')]</value>
         </property>
         </properties>
   </rule>

   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         language="java"
         message="AllowAllHostnameVerifier used, this is not a secure connection"
         name="AllowAllHostnames"
         typeResolution="true">
            <description>
         public TrustAllSSLSocketFactory() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException, UnrecoverableKeyException {
         super(null);
         try {
            SSLContext sslcontext=SSLContext.getInstance("TLS");
            sslcontext.init(null,new TrustManager[]{new TrustAllManager()},null);
            factory=sslcontext.getSocketFactory();
            factory.setHostnameVerifier(org.apache.http.conn.ssl.SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
         }
         catch (  Exception ex) {}
         }
      </description>
            <priority>5</priority>
            <properties>
               <property name="xpath">
                     <value>//Name[contains(@Image,'ALLOW_ALL_HOSTNAME_VERIFIER')]</value>
               </property>
            </properties>
      </rule>

   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         language="java"
         message="Caught SSL or Certificate exception not reported"
         name="EmptyCatchBlock(SSL)"
         typeResolution="true">
            <description>
            public void doSomething() {
       try {
         SSLSocketFactory fis = new SSLSocketFactory(foobar);
          } catch (SSLException ioe) {
        // not good
          }
      </description>
            <priority>3</priority>
            <properties>
               <property name="xpath">
                  <value>
                    //CatchStatement
                   [count(Block/BlockStatement) = 0]
                   [FormalParameter/Type/ReferenceType
                     /ClassOrInterfaceType[@Image='CertificateException' or @Image='CertPathValidatorException' 
                     or @Image='SSLException' or  @Image='SSLHandshakeException' 
                     or @Image='SSLKeyException' or @Image='SSLPeerUnverifiedException' 
                     or @Image='SSLProtocolException' or @Image='CertificateEncodingException' 
                     or @Image='CertificateExpiredException' or @Image='CertificateNotYetValidException'
                     or @Image='CertificateParsingException' or @Image='CertificateRevokedException']
                   ]
                  </value>
               </property>
            </properties>
      </rule>

      <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         language="java"
         message="SSLSocket created without proper hostname verification"
         name="UnsafeHostnameVerification"
         typeResolution="true">
            <description>
                SSLSocket socket = (SSLSocket) sf.createSocket("gmail.com", 443);
               HostnameVerifier hv = HttpsURLConnection.getDefaultHostnameVerifier();

               if (!hv.verify("mail.google.com", s)) {
                //throw SSLException();
               }
      </description>
            <priority>3</priority>
            <properties>
               <property name="xpath">
                  <value>
                   //Block[BlockStatement/LocalVariableDeclaration/Type/ReferenceType/ClassOrInterfaceType[@Image='SSLSocket'] 
                     and (not(BlockStatement/LocalVariableDeclaration/VariableDeclarator/VariableInitializer/Expression/PrimaryExpression/PrimaryPrefix/Name[contains(@Image, 'getDefaultHostnameVerifier')])
                        or not(//ThrowStatement) 
                        or (count(//ThrowStatement/Expression/PrimaryExpression/PrimarySuffix/ArgumentCount)=0))
                     ]
                  </value>
               </property>
            </properties>
      </rule>


</ruleset>


